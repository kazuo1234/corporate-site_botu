@import url(./foundation/normalize.css);
@import url(./foundation/skeleton.css);
html {
  font-size: 62.5%; }

header {
  background: #eaf2f4; }
  header #header_in {
    padding-top: 10px;
    padding-bottom: 4px; }
  @media (max-width: 550px) {
    header .logo {
      width: 190px; }
    header .navi {
      width: 40px;
      float: right; } }
  header .sp_navi_li {
    width: 180px;
    position: absolute;
    top: 50px;
    right: 2%;
    border: 1px solid #eee;
    background: white;
    margin: 0;
    padding: 0;
    display: none; }
    header .sp_navi_li li {
      list-style: none;
      margin: 0;
      padding: 0; }
      header .sp_navi_li li a {
        display: block;
        padding: 10px 8px;
        border-bottom: 1px solid #eee;
        font-size: 14px;
        text-decoration: none; }
  @media (min-width: 551px) {
    header .sp_navi {
      display: none; }
    header #header_in {
      padding: 15px 0 10px 0; }
    header .pc_navi_li {
      margin: 0;
      padding: 0; }
      header .pc_navi_li li {
        list-style: none;
        margin: 5px 0 0 0;
        padding: 0; }
        header .pc_navi_li li a {
          color: #626262;
          text-decoration: none;
          font-weight: bold;
          font-size: 14px;
          font-size: 1.4rem;
          float: left;
          padding-right: 10px; }
        header .pc_navi_li li a:hover {
          color: #42b9d0; }
      header .pc_navi_li li.navi_toppage a {
        background-repeat: no-repeat;
        display: inline-block;
        line-height: 40px;
        padding-left: 50px;
        background-image: url("../images/top/navi_top.png");
        background-size: 40px 40px; } }
    @media screen and (min-width: 551px) and (-webkit-min-device-pixel-ratio: 2), (min-width: 551px) and (-webkit-min-device-pixel-ratio: 2), (min-width: 551px) and (min-resolution: 2dppx) {
      header .pc_navi_li li.navi_toppage a {
        background-image: url("../images/top/navi_top@2x.png"); } }
  @media (min-width: 551px) {
      header .pc_navi_li li.navi_news a {
        background-repeat: no-repeat;
        display: inline-block;
        line-height: 40px;
        padding-left: 50px;
        background-image: url("../images/top/navi_news.png");
        background-size: 40px 40px; } }
    @media screen and (min-width: 551px) and (-webkit-min-device-pixel-ratio: 2), (min-width: 551px) and (-webkit-min-device-pixel-ratio: 2), (min-width: 551px) and (min-resolution: 2dppx) {
      header .pc_navi_li li.navi_news a {
        background-image: url("../images/top/navi_news@2x.png"); } }
  @media (min-width: 551px) {
      header .pc_navi_li li.navi_company a {
        background-repeat: no-repeat;
        display: inline-block;
        line-height: 40px;
        padding-left: 50px;
        background-image: url("../images/top/navi_company.png");
        background-size: 40px 40px; } }
    @media screen and (min-width: 551px) and (-webkit-min-device-pixel-ratio: 2), (min-width: 551px) and (-webkit-min-device-pixel-ratio: 2), (min-width: 551px) and (min-resolution: 2dppx) {
      header .pc_navi_li li.navi_company a {
        background-image: url("../images/top/navi_company@2x.png"); } }
  @media (max-width: 550px) {
    header .pc_navi {
      display: none; } }

#cover_area {
  text-align: center;
  padding: 80px 0;
  background-image: url("../images/top/cover.jpg");
  background-size: cover; }
  @media screen and (-webkit-min-device-pixel-ratio: 2), (-webkit-min-device-pixel-ratio: 2), (min-resolution: 2dppx) {
    #cover_area {
      background-image: url("../images/top/cover@2x.jpg"); } }

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGUuY3NzIiwic291cmNlcyI6WyJzdHlsZS5zY3NzIiwiZm91bmRhdGlvbi9fYmFzZS5zY3NzIiwiZm91bmRhdGlvbi9fdmFyaWFibGVzLnNjc3MiLCJsYXlvdXQvX2hlYWRlci5zY3NzIiwibGF5b3V0L19jb3Zlcl9hcmVhLnNjc3MiLCJsYXlvdXQvX3N1Yl9jb250ZW50LnNjc3MiLCJvYmplY3QvcHJvamVjdC9fYXJ0aWNsZS5zY3NzIiwib2JqZWN0L3Byb2plY3QvX2J1dHRvbi5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU1BLE9BQU8sQ0FBUCwrQkFBTztBQUNQLE9BQU8sQ0FBUCw4QkFBTztBQ0xQLEFBQUEsSUFBSSxDQUFDO0VBQ0QsU0FBUyxFQUFFLEtBQUssR0FDbkI7O0FFV0QsQUFBQSxNQUFNLENBQUM7RUFDSCxVQUFVLEVESkQsT0FBTyxHQ3FHbkI7RUFsR0QsQUFHSSxNQUhFLENBR0YsVUFBVSxDQUFDO0lBQ1AsV0FBVyxFQUFFLElBQUk7SUFDakIsY0FBYyxFQUFFLEdBQUcsR0FDdEI7RUFFRCxNQUFNLEVBQUUsU0FBUyxFQUFDLEtBQUs7SUFSM0IsQUFTUSxNQVRGLENBU0UsS0FBSyxDQUFDO01BQ0YsS0FBSyxFQUFFLEtBQUssR0FDZjtJQVhULEFBYVEsTUFiRixDQWFFLEtBQUssQ0FBQztNQUNGLEtBQUssRUFBRSxJQUFJO01BQ1gsS0FBSyxFQUFFLEtBQUssR0FDZjtFQWhCVCxBQW1CSSxNQW5CRSxDQW1CRixXQUFXLENBQUM7SUFDUixLQUFLLEVBQUUsS0FBSztJQUNaLFFBQVEsRUFBRSxRQUFRO0lBQ2xCLEdBQUcsRUFBRSxJQUFJO0lBQ1QsS0FBSyxFQUFFLEVBQUU7SUFDVCxNQUFNLEVBQUUsY0FBYztJQUN0QixVQUFVLEVBQUUsS0FBSztJQUNqQixNQUFNLEVBQUUsQ0FBQztJQUNULE9BQU8sRUFBRSxDQUFDO0lBQ1YsT0FBTyxFQUFFLElBQUksR0FlaEI7SUEzQ0wsQUE4QlEsTUE5QkYsQ0FtQkYsV0FBVyxDQVdQLEVBQUUsQ0FBQztNQUNDLFVBQVUsRUFBRSxJQUFJO01BQ2hCLE1BQU0sRUFBRSxDQUFDO01BQ1QsT0FBTyxFQUFFLENBQUMsR0FTYjtNQTFDVCxBQW1DWSxNQW5DTixDQW1CRixXQUFXLENBV1AsRUFBRSxDQUtFLENBQUMsQ0FBQztRQUNFLE9BQU8sRUFBRSxLQUFLO1FBQ2QsT0FBTyxFQUFFLFFBQVE7UUFDakIsYUFBYSxFQUFFLGNBQWM7UUFDN0IsU0FBUyxFQUFFLElBQUk7UUFDZixlQUFlLEVBQUUsSUFBSSxHQUN4QjtFQUdULE1BQU0sRUFBRSxTQUFTLEVBQUMsS0FBSztJQTVDM0IsQUE2Q1EsTUE3Q0YsQ0E2Q0UsUUFBUSxDQUFDO01BQ0wsT0FBTyxFQUFFLElBQUksR0FDaEI7SUEvQ1QsQUFnRFEsTUFoREYsQ0FnREUsVUFBVSxDQUFDO01BQ1QsT0FBTyxFQUFFLGFBQWEsR0FDdkI7SUFsRFQsQUFvRFEsTUFwREYsQ0FvREUsV0FBVyxDQUFDO01BQ1IsTUFBTSxFQUFDLENBQUM7TUFDUixPQUFPLEVBQUMsQ0FBQyxHQXFDWjtNQTNGVCxBQXdEWSxNQXhETixDQW9ERSxXQUFXLENBSVAsRUFBRSxDQUFDO1FBQ0MsVUFBVSxFQUFDLElBQUk7UUFDZixNQUFNLEVBQUUsU0FBUztRQUNqQixPQUFPLEVBQUUsQ0FBQyxHQWNiO1FBekViLEFBNkRnQixNQTdEVixDQW9ERSxXQUFXLENBSVAsRUFBRSxDQUtFLENBQUMsQ0FBQztVQUNFLEtBQUssRUFBRSxPQUFPO1VBQ2QsZUFBZSxFQUFFLElBQUk7VUFDckIsV0FBVyxFQUFFLElBQUk7VUZ4RW5DLFNBQVMsRUFBRSxJQUFVO1VBQ3JCLFNBQVMsRUFBRSxNQUFzQjtVRXlFZixLQUFLLEVBQUUsSUFBSTtVQUNYLGFBQWEsRUFBRSxJQUFJLEdBQ3RCO1FBcEVqQixBQXNFZ0IsTUF0RVYsQ0FvREUsV0FBVyxDQUlQLEVBQUUsQ0FjRSxDQUFDLEFBQUEsTUFBTSxDQUFDO1VBQ0osS0FBSyxFRDVFaEIsT0FBTyxHQzZFQztNQXhFakIsQUEyRTRCLE1BM0V0QixDQW9ERSxXQUFXLENBdUJQLEVBQUUsQUFBQSxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBdkYxQixpQkFBaUIsRUFBQyxTQUFTO1FBQzNCLE9BQU8sRUFBRSxZQUFZO1FBQ3JCLFdBQVcsRUFBRSxJQUFJO1FBQ2pCLFlBQVksRUFBRSxJQUFJO1FBQ2xCLGdCQUFnQixFQUFFLGlDQUFTO1FBQzNCLGVBQWUsRUFBRSxTQUFTLEdBcUZqQjtJQW5GVCxNQUFNLENBQUMsTUFBOEMsTUFpRDdDLFNBQVMsRUFBQyxLQUFLLE9BakRKLDhCQUE4QixFQUFFLENBQUMsSUFpRDVDLFNBQVMsRUFBQyxLQUFLLE9BakRpQyxjQUFjLEVBQUUsS0FBSztNQUtqRixBQTJFNEIsTUEzRXRCLENBb0RFLFdBQVcsQ0F1QlAsRUFBRSxBQUFBLGFBQWEsQ0FBQyxDQUFDLENBQUM7UUEvRXRCLGdCQUFnQixFQUFFLG9DQUFlLEdBa0Y1QjtFQWxDVCxNQUFNLEVBQUUsU0FBUyxFQUFDLEtBQUs7TUE1QzNCLEFBaUZ5QixNQWpGbkIsQ0FvREUsV0FBVyxDQTZCUCxFQUFFLEFBQUEsVUFBVSxDQUFDLENBQUMsQ0FBQztRQTdGdkIsaUJBQWlCLEVBQUMsU0FBUztRQUMzQixPQUFPLEVBQUUsWUFBWTtRQUNyQixXQUFXLEVBQUUsSUFBSTtRQUNqQixZQUFZLEVBQUUsSUFBSTtRQUNsQixnQkFBZ0IsRUFBRSxrQ0FBUztRQUMzQixlQUFlLEVBQUUsU0FBUyxHQTJGakI7SUF6RlQsTUFBTSxDQUFDLE1BQThDLE1BaUQ3QyxTQUFTLEVBQUMsS0FBSyxPQWpESiw4QkFBOEIsRUFBRSxDQUFDLElBaUQ1QyxTQUFTLEVBQUMsS0FBSyxPQWpEaUMsY0FBYyxFQUFFLEtBQUs7TUFLakYsQUFpRnlCLE1BakZuQixDQW9ERSxXQUFXLENBNkJQLEVBQUUsQUFBQSxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBckZuQixnQkFBZ0IsRUFBRSxxQ0FBZSxHQXdGNUI7RUF4Q1QsTUFBTSxFQUFFLFNBQVMsRUFBQyxLQUFLO01BNUMzQixBQXVGNEIsTUF2RnRCLENBb0RFLFdBQVcsQ0FtQ1AsRUFBRSxBQUFBLGFBQWEsQ0FBQyxDQUFDLENBQUM7UUFuRzFCLGlCQUFpQixFQUFDLFNBQVM7UUFDM0IsT0FBTyxFQUFFLFlBQVk7UUFDckIsV0FBVyxFQUFFLElBQUk7UUFDakIsWUFBWSxFQUFFLElBQUk7UUFDbEIsZ0JBQWdCLEVBQUUscUNBQVM7UUFDM0IsZUFBZSxFQUFFLFNBQVMsR0FpR2pCO0lBL0ZULE1BQU0sQ0FBQyxNQUE4QyxNQWlEN0MsU0FBUyxFQUFDLEtBQUssT0FqREosOEJBQThCLEVBQUUsQ0FBQyxJQWlENUMsU0FBUyxFQUFDLEtBQUssT0FqRGlDLGNBQWMsRUFBRSxLQUFLO01BS2pGLEFBdUY0QixNQXZGdEIsQ0FvREUsV0FBVyxDQW1DUCxFQUFFLEFBQUEsYUFBYSxDQUFDLENBQUMsQ0FBQztRQTNGdEIsZ0JBQWdCLEVBQUUsd0NBQWUsR0E4RjVCO0VBR1QsTUFBTSxFQUFFLFNBQVMsRUFBQyxLQUFLO0lBN0YzQixBQThGUSxNQTlGRixDQThGRSxRQUFRLENBQUM7TUFDTCxPQUFPLEVBQUUsSUFBSSxHQUNoQjs7QUM3R1QsQUFBQSxXQUFXLENBQUM7RUFFUixVQUFVLEVBQUUsTUFBTTtFQUNsQixPQUFPLEVBQUUsTUFBTTtFQUdmLGdCQUFnQixFQUFFLDhCQUE4QjtFQUNoRCxlQUFlLEVBQUUsS0FBSyxHQUt6QjtFQUhHLE1BQU0sQ0FBQyxNQUFNLE1BQU0sOEJBQThCLEVBQUUsQ0FBQyxJQUFJLGNBQWMsRUFBRSxLQUFLO0lBVGpGLEFBQUEsV0FBVyxDQUFDO01BVUosZ0JBQWdCLEVBQUUsaUNBQWlDLEdBRTFEIn0= */

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
